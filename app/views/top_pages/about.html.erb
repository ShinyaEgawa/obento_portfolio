<% provide(:title, "みんおべ！とは") %>
<section>
  <article class="about">
    <h1>みんおべ！とは</h1>
    <p>
      「みんなが作ったお弁当を共有するサイト」<br />
      略して「みんおべ！」を閲覧していただき、誠にありがとうございます。<br />
      なぜ、このポートフォリオを作成したのか、どのような機能の実装を行ったのか等、順を追って説明させて頂きます。
    </p>
    <h1>なぜ、このサイト(ポートフォリオ)を作成したのか</h1>
    <p>
      なぜ、このサイトを作ったのかなのですが、中学高校とお昼ご飯は毎日母が作ってくれたお弁当でした。<br />
      どのような忙しい時でも作ってくれた事に感謝はしているのですが、日々のお弁当の努力は誰にも分からないのでは無いかと思いました。<br />
      そこで、その時に考えたのは、サイトを立ち上げてそこにお弁当の出来栄えや努力したことを報告できたらいいのでは無いかと思いこのサイトを作成致しました。<br />
      作成期間は1ヶ月ほどを目安に実装を行いました。ご確認のほど、よろしくお願いいたします。
    </p>
    <h1>導入</h1>
    <p>どのような導入を行ったのかを以下にまとめました</p>
    <article class="Introduction">
      <h1>Docker</h1>
      <p>
        今回のポートフォリオでは現在、主流になっているDockerを使用し、Railsを構築しています。<br />
        ポートフォリオで初めてDockerを使用しましたが、公式文章やQiitaなどを閲覧していくうちに、<br />
        Dockerの利点や仮想マシンとの大きな違いなど理解することができました。<br />
        私のQiitaで導入手順などを議事録として書かせていただきました為、一度ご確認の程よろしくお願いします。<br />
        <br />
        <a href="https://qiita.com/pooooon/items/547a9cb4cd2a6f291468" id="a_invalid" class="btn">
          Railsでポートフォリオを作ってみよう！ vol.1 前編 (Docker導入編)
        </a>
      </p>
      <h1>Docker-compose</h1>
      <p>
        こちらもDockerと併用して実装を行いました。<br />
        Dockerfileやdocker-compose.ymlを一から作成させて頂きました。<br />
        docker-composeでのエラーは少なかったのですが、DBでのエラーが非常に多く、<br />
        特に[OCI runtime create failed error]には原因と解決策が数多くあり、<br />
        私自身に起こったエラーと似ている解決策を探すのに一苦労した記憶があります。<br />
        こちらもQiitaで導入手順を議事録として書かせていただきました。<br />
        <a href="https://qiita.com/pooooon/items/9f792dc7a99e5623522c" id="a_invalid" class="btn" style="margin-left:10%;">
          Railsでポートフォリオを作ってみよう！ vol.1 後編 (docker-compose導入〜rails構築編)
        </a>
      </p>
      <h1>Circle ci</h1>
      <p>
        最近Dockerと並んで流行っているCircle ciも導入しようと試みています<br />
        現在絶賛実装中です。
      </p>
    </article>
    <h1>機能の実装</h1>
    <p>
      どのような機能の実装を行ったのかを以下にまとめました。<br />
      ちなみに、今回はBootstrapの力を使用せずにViewを作成しました。<br />
      cssファイルがとても見にくくなっております。申し訳ありません。
    </p>
    <article class="Feature-implementation">
      <h1>ユーザーの新規登録機能</h1>
      <p>
        ユーザーが必要な情報を入力し、記入ミスや空欄だった場合はバリデーションで止めるなど<br />
        基本的な機能の実装を行いました。<br />
        また、新規登録後は、すぐにログイン出来るようになるのではなく、<br />
        一度、メールでのアカウント認証を行ってからログインができるようになっております。
      </p>
      <h1>メールでのアカウント有効化</h1>
      <p>
        RailsTutorial、第11章を参照に実装を行いました。<br />
        上記でも話した通り、<br />
        「新規登録→ログインユーザー」<br />
        になるのではなく、<br />
        「新規登録→メールでのアカウント有効化→有効化用URLを踏む→ログインユーザー」<br />
        という、本人確認を交えた実装を行いました。
      </p>
      <h1>ユーザーのログイン・ログアウト機能</h1>
      <p>
        新規登録では名前からニックネーム、メールアドレスなど多くの情報を記入しないといけませんでしたが、<br />
        ログイン時には、メールアドレスとパスワードが合致していればログインできるように実装を行いました。<br />
        また、cookieを使用してログイン状態を保持できるようになっております。
      </p>
      <h1>ユーザーの更新・編集機能</h1>
      <p>
        ログイン後にマイページから「ユーザーの情報を編集する」をクリックしていただく事で編集が行えます。<br />
        新規登録の際に登録していただいた情報は、パスワードを打ち込まなくても変更ができるようになっております<br />
      </p>
      <h1>パスワードを忘れた際の再設定</h1>
      <p>
        パスワードを忘れた際は、ウェブサイトで一般的に使われる、登録してあるメールアドレスに<br />
        再設定を促すメールを送る仕組みで実装を行いました。
      </p>
      <h1>投稿機能</h1>
      <p>
        写真を添付し、好きな文章を300文字までで記入して投稿できる機能を実装しました。<br />
        ログイン後のホーム画面でしか投稿はできないのが、悔やまれるところです。
      </p>
      <h1>ユーザーフォロー機能</h1>
      <p>
        ユーザーをフォロー/アンフォローすると同時にフォロー/フォロワー数も増減するよう、<br />
        非同期通信を行い実装をいたしました。
      </p>
      <h1>いいね！機能</h1>
      <p>
        この機能はRailsTutorialの第14章を参照しながら実装を行いました。<br />
        UserやMicropostとの関連付けや非同期通信、ルーティングなど、実装箇所は多かったですが、<br />
        思うように完成してよかったです。
      </p>
      <h1>ユーザー・投稿の検索機能</h1>
      <p>
        実装は検索機能を容易に行えるransackを使用せず<br />
        Railsの機能の一つであるscopeを使用して行いました。<br />
        MicropostModelとUserModelのそれぞれに検索scopeを用いた為、<br />
        一つの検索窓でどちらの検索も行えるようになっております。
      </p>
      <h1>ゲストユーザーの実装</h1>
      <p>
        ゲストユーザーと言っても、全ての機能を確認していただきたい為、<br />
        管理者権限が付与してあるユーザーでのログインが可能となっております。
      </p>
    </article>
  </article>
</section>
